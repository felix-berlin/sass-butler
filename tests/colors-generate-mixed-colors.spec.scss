@use 'true';
@use '../functions' as fn with (
	$is-test: true,
);

@include true.describe('generate-mixed-colors()') {
	@include true.it('should throw an error if the step and peak parameters are wrong') {
		@include true.assert-equal(
			fn.generate-mixed-colors(1, 1, 1),
			'ERROR: ❌  ===> The color1 parameter must be a color.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, 1, 1),
			'ERROR: ❌  ===> The color2 parameter must be a color.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, 1),
			'ERROR: ❌  ===> The color3 parameter must be a color.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, "hallo"),
			'ERROR: ❌  ===> The steps parameter must be an integer.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 10, "welt"),
			'ERROR: ❌  ===> The color2-peak parameter must be an integer.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 0, 2),
			'ERROR: ❌  ===> The peak point for color2 must be less than or equal to the number of steps.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 0, 0),
			'ERROR: ❌  ===> The peak point for color2 must be greater than or equal to 1.'
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, -1, -1),
			'ERROR: ❌  ===> The peak point for color2 must be greater than or equal to 1.'
		);
	}
	@include true.it('should return expected color maps') {
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 1, 1),
			(1: yellow)
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 3, 2),
			(1: green, 2: yellow, 3: red)
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 2, 1),
			(1: yellow, 2: red)
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red, 2, 2),
			(1: green, 2: yellow)
		);
		@include true.assert-equal(
			fn.generate-mixed-colors(green, yellow, red),
			(1: green, 2: rgb(46.3636363636, 151.0909090909, 0), 3: rgb(69.5454545455, 162.6363636364, 0), 4: rgb(92.7272727273, 174.1818181818, 0), 5: rgb(115.9090909091, 185.7272727273, 0), 6: rgb(139.0909090909, 197.2727272727, 0), 7: rgb(162.2727272727, 208.8181818182, 0), 8: rgb(185.4545454545, 220.3636363636, 0), 9: rgb(208.6363636364, 231.9090909091, 0), 10: rgb(231.8181818182, 243.4545454545, 0), 11: yellow, 12: rgb(255, 226.6666666667, 0), 13: rgb(255, 198.3333333333, 0), 14: #ffaa00, 15: rgb(255, 141.6666666667, 0), 16: rgb(255, 113.3333333333, 0), 17: #ff5500, 18: rgb(255, 56.6666666667, 0), 19: rgb(255, 28.3333333333, 0), 20: red),
			$inspect: true
			);
		@include true.assert-equal(
			fn.generate-mixed-colors(#7ed321, #ffc700, #cc0000),
			(1: #7ed321, 2: rgb(149.4545454545, 208.8181818182, 27), 3: rgb(161.1818181818, 207.7272727273, 24), 4: rgb(172.9090909091, 206.6363636364, 21), 5: rgb(184.6363636364, 205.5454545455, 18), 6: rgb(196.3636363636, 204.4545454545, 15), 7: rgb(208.0909090909, 203.3636363636, 12), 8: rgb(219.8181818182, 202.2727272727, 9), 9: rgb(231.5454545455, 201.1818181818, 6), 10: rgb(243.2727272727, 200.0909090909, 3), 11: #ffc700, 12: rgb(249.3333333333, 176.8888888889, 0), 13: rgb(243.6666666667, 154.7777777778, 0), 14: rgb(238, 132.6666666667, 0), 15: rgb(232.3333333333, 110.5555555556, 0), 16: rgb(226.6666666667, 88.4444444444, 0), 17: rgb(221, 66.3333333333, 0), 18: rgb(215.3333333333, 44.2222222222, 0), 19: rgb(209.6666666667, 22.1111111111, 0), 20: #cc0000),
			$inspect: true
		);
	}
}
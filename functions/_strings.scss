@use 'sass:string';
@use '../variables/variables' as vars;
@forward 'type-checking';

/// Replace `$search` with `$replace` in `$string`
/// Used on our SVG icon backgrounds for custom forms.
///
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
/// @group String
/// @author Hugo Giraudel
/// @since v1.0.0
///
/// @example
///    @include str-replace($var, '', '_');
///
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

/// Requires the use of quotes around data URIs.
/// @param {String} $string - SVG code
/// @return {String} - SCSS compiled output after URL-encoding
/// @group String
/// @author Kevin Weber
/// @link https://codepen.io/kevinweber/pen/dXWoRw
/// @since v1.0.0
///
/// @example
///    $icon: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'><polyline points='6 9 12 15 18 9'></polyline></svg>");
///
///    background-image: escape-svg($icon);
///
@function escape-svg($string) {
  @if string.index($string, 'data:image/svg+xml') {
    @each $char, $encoded in vars.$escaped-characters {
      // Do not escape the url brackets
      @if string.index($string, 'url(') == 1 {
        $string: url('#{str-replace(string.slice($string, 6, -3), $char, $encoded)}');
      } @else {
        $string: str-replace($string, $char, $encoded);
      }
    }
  }

  @return $string;
}

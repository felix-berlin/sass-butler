// Sass Funktionen
@use 'sass:map';
@use 'sass:list';

// Breakpoint Vars
$xxs: 375px !default; // Smartphone Portrait
$xs: 568px !default; // Smartphone Landscape
$sm: 768px !default; // Tablet Portrait
$md: 1024px !default; // Tablet Landscape
$lg: 1260px !default; // Kleinerer Desktop
$xlg: 1440px !default; // Widescreen
$fhd: 1920px !default; // Full HD

// Breakpoint Map
$breakpoints: (
  'xxs': $xxs,
  'xs': $xs,
  'sm': $sm,
  'md': $md,
  'lg': $lg,
  'xlg': $xlg,
  'fhd': $fhd,
) !default;

/// Breakpoint Mixin using breakpoint map
/// @param {String} $breakpoint Breakpoint key from the breakpoints map
/// @param {String} $direction ['min'] Breakpoint direction min or max
/// @param {Map} $breakpoint-map [$breakpoints] All breakpoint vars in one map
/// @group Breakpoint
/// @author Felix Scholze
/// @since v1.1.0
///
/// @example
///    .my-selector {
///      @include breakpoint(lg) {...}
///    }
///
/// @example css - Output CSS
///    @media (min-width: 1260px) {
///       .my-selector {...}
///    }
///
@mixin breakpoint(
  $breakpoint,
  $direction: 'min',
  $breakpoint-map: $breakpoints
) {
  // Error handling
  $validDirection: (min, max);

  // Gebe einen Fehler aus wenn die Breakpointrichtung nicht stimmt
  @if not list.index($validDirection, $direction) {
    @error '❌  ===> #{$direction} is not a valite option for direction. Please use: #{$validDirection}';
  }

  // Gebe einen Fehler aus wenn es den Breakpoint nicht in der Map gibt
  @if map.has-key($breakpoint-map, $breakpoint) != true {
    @error '❌  ===> #{$breakpoint} is not valid breakpoint. Please use: #{map.keys($breakpoint-map)}';
  }

  // Suche und gebe den Key aus der Breakpoints Map wieder
  $getBreakpoints: map.get($breakpoint-map, $breakpoint);

  @if $direction == 'min' {
    @media (min-width: $getBreakpoints) {
      @content;
    }
  }

  @if $direction == 'max' {
    @media (max-width: $getBreakpoints) {
      @content;
    }
  }
}

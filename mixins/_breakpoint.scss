// Sass functions
@use 'sass:map';
@use 'sass:list';

// Breakpoint Vars
$xxs: 375px !default; // Smartphone Portrait
$xs: 568px !default; // Smartphone Landscape
$sm: 768px !default; // Tablet Portrait
$md: 1024px !default; // Tablet Landscape
$lg: 1260px !default; // Kleinerer Desktop
$xlg: 1440px !default; // Widescreen
$fhd: 1920px !default; // Full HD

// Breakpoint Map
$breakpoints: (
	'xxs': $xxs,
	'xs': $xs,
	'sm': $sm,
	'md': $md,
	'lg': $lg,
	'xlg': $xlg,
	'fhd': $fhd,
) !default;

/// Breakpoint Mixin using breakpoint map
/// @param {String} $breakpoint Breakpoint key from the breakpoints map
/// @param {String} $direction ['min'] Breakpoint direction min or max
/// @param {Map} $breakpoint-map [$breakpoints] All breakpoint vars in one map
/// @group Breakpoint
/// @author Felix Scholze
/// @since v1.1.0
///
/// @example
///    .my-selector {
///      @include breakpoint(lg) {...}
///    }
///
/// @example css - Output CSS
///    @media (min-width: 1260px) {
///       .my-selector {...}
///    }
///
@mixin breakpoint(
	$breakpoint,
	$direction: 'min',
	$breakpoint-map: $breakpoints
) {
	// Error handling
	$valid-direction: ('min', 'max');

	// Search and return the key from the breakpoints map
	$get-breakpoints: map.get($breakpoint-map, $breakpoint);

	// Give an error if the breakpoint direction is not correct
	@if not list.index($valid-direction, $direction) {
		@error '❌  ===> #{$direction} is not a valite option for direction. Please use: #{$valid-direction}';
	}

	// Give an error if the breakpoint does not exist in the map
	@if map.has-key($breakpoint-map, $breakpoint) != true {
		@error '❌  ===> #{$breakpoint} is not valid breakpoint. Please use: #{map.keys($breakpoint-map)}';
	}
	@if $direction == 'min' {
		@media (min-width: $get-breakpoints) {
			@content;
		}
	}
	@if $direction == 'max' {
		@media (max-width: $get-breakpoints - 1) {
			@content;
		}
	}
}
